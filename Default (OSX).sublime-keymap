[
	// auto completion
	{ "keys": ["super+."], "command": "auto_complete" },
	{ "keys": ["super+."], "command": "replace_completion_with_auto_complete", "context":
		[
			{ "key": "last_command", "operator": "equal", "operand": "insert_best_completion" },
			{ "key": "auto_complete_visible", "operator": "equal", "operand": false },
			{ "key": "setting.tab_completion", "operator": "equal", "operand": true }
		]
	},
	// { "keys": ["super+l"], "command": "move_to", "args": {"to": "eol", "extend": false} },
    { "keys": ["j", "j"], "command": "exit_insert_mode",
        "context":
        [
            { "key": "setting.command_mode", "operand": false },
            { "key": "setting.is_widget", "operand": false }
        ]
    },
    {
		"keys": ["super+right"],
		"command": "set_layout",
		"args":
		{
			"cols": [0.0, 0.7, 1.0],
			"rows": [0.0, 1.0],
			"cells": [[0, 0, 1, 1], [1, 0, 2, 1]]
		}
	}, {
		"keys": ["super+left"],
		"command": "set_layout",
		"args":
		{
			"cols": [0.0, 0.3, 1.0],
			"rows": [0.0, 1.0],
			"cells": [[0, 0, 1, 1], [1, 0, 2, 1]]
		}
	},
	// { "keys": ["shift+ctrl+."], "command": "code_intel_auto_complete" },
	// { "keys": ["f2"], "command": "goto_python_definition"},
	// { "keys": ["f3"], "command": "back_to_python_definition"}
	{
		"keys": ["super+up"],
		"command": "show_panel",
		"args": {
			"panel": "output.exec"
		}
	},
	// Move out of common paired characters () and [] with `Tab`
	{
		"keys": ["tab"],
		"command": "move",
		"args": {"by": "characters", "forward": true},
		"context": [
			{ "key": "auto_complete_visible", "operator": "equal", "operand": false},
			{ "key": "has_next_field", "operator": "equal", "operand": false },
			// Check if next char matches (followed by anything)
			{ "key": "following_text", "operator": "regex_match", "operand": "(:?`|\\)|\\]|\\}).*", "match_all": true },
			// ...and that there is a paid character before it on the same
			// line. This lets you `tab` to Indent at lines with single ]s
			// still, like in a JSOn file
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "(:?`|\\(|\\[|\\{)", "match_all": true }
		]
	},

	// Move out of single and double quotes with `Tab`
	{
		"keys": ["tab"],
		"command": "move",
		"args": {"by": "characters", "forward": true},
		"context": [
			{ "key": "auto_complete_visible", "operator": "equal", "operand": false},
			{ "key": "has_next_field", "operator": "equal", "operand": false },
			{ "key": "following_text", "operator": "regex_match", "operand": "(?:\"|').*", "match_all": true },
			{ "key": "preceding_text", "operator": "regex_contains", "operand": "(?:\"|')", "match_all": true }
		]
	},
    // browser_refresh
    {
        "keys": ["super+shift+r"], "command": "browser_refresh", "args": {
            "auto_save": true,
            "delay": 0,
            "activate_browser": true,
            "browser_name" : "Google Chrome"
        }
    },
    {
    	"keys": ["g", "v"],
    	"command": "insert_snippet",
    	"args": {
    	  "name": "Packages/User/captured-snippet.sublime-snippet"
    	},
    	"context":
        [
            { "key": "setting.command_mode", "operand": true },
            { "key": "setting.is_widget", "operand": false }
        ]
	},
	{
    	"keys": ["g", "c"],
	    "command": "capture_snippet",
	    "args": {
			"name": "User/captured-snippet.sublime-snippet"
	    } ,
    	"context":
        [
            { "key": "setting.command_mode", "operand": true },
            { "key": "setting.is_widget", "operand": false }
        ]
	},
	//anacoda
	{"command": "anaconda_goto", "keys": ["g", "d"],
        "context":
        [
            { "key": "selector", "operator": "equal", "operand": "source.python" },
            { "key": "setting.command_mode", "operand": true },
            { "key": "setting.is_widget", "operand": false }
        ]
    },{"command": "anaconda_doc", "keys": ["g", "s"],
        "context":
        [
            { "key": "selector", "operator": "equal", "operand": "source.python" },
            { "key": "setting.command_mode", "operand": true },
            { "key": "setting.is_widget", "operand": false }
        ]
    },{"command": "anaconda_find_usages", "keys": ["g", "f"],
        "context":
        [
            { "key": "selector", "operator": "equal", "operand": "source.python" },
            { "key": "setting.command_mode", "operand": true },
            { "key": "setting.is_widget", "operand": false }
        ]
    },
	//angularjs
	{"command": "angularjs_go_to_definition", "keys": ["g", "d"],
        "context":
        [
            { "key": "selector", "operator": "equal", "operand": "text.html,source.js" },
            { "key": "setting.command_mode", "operand": true },
            { "key": "setting.is_widget", "operand": false }
        ]
    },{"command": "angularjs_go_to_documentation", "keys": ["g", "s"],
        "context":
        [
            { "key": "selector", "operator": "equal", "operand": "text.html,source.js" },
            { "key": "setting.command_mode", "operand": true },
            { "key": "setting.is_widget", "operand": false }
        ]
    },{"command": "angularjs_find", "keys": ["g", "f"],
        "context":
        [
            { "key": "selector", "operator": "equal", "operand": "text.html,source.js" },
            { "key": "setting.command_mode", "operand": true },
            { "key": "setting.is_widget", "operand": false }
        ]
    }
]
